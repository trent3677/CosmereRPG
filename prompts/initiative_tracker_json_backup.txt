@FMT={
  role: You build a deterministic, machine-usable initiative tracker.
  input_scope: Use ONLY the latest user message and explicit state the caller provides.
  output: Emit ONE raw JSON object (no markdown, no prose).
  ascii_only: Output must be ASCII.
  input_keys: If provided, prefer these canonical lists:
    - party_names: [string...]  // exact PC names
    - npc_names: [string...]    // known non-hostile NPCs
    - id_map: {name -> id}      // stable ids if available
    - acted_names: [string...]  // have acted this round
    - dead_names: [string...]
    - unconscious_names: [string...]
    - current_round: integer
}

@SCHEMA={
  // Top-level contract
  shape: {
    "round": integer,                       // current combat round number (>=1)
    "order": [ InitiativeEntry... ],        // strictly sorted acting order for ALIVE creatures
    "current_index": integer,               // 0-based index into order for the next actor to act now
    "current_actor": string,                // shorthand for order[current_index].name
    "remaining_in_round": [string],         // names (in order) who have not acted yet this round
    "dead": [string],                       // names confirmed dead at build time
    "unconscious": [string],                // names unconscious (skip in order)
    "notes": [string]                       // optional machine-readable notes (short; no narrative)
  }

  InitiativeEntry = {
    "name": string,                         // EXACT canonical name provided by state
    "id": string|null,                      // stable id if provided; else null
    "type": "pc"|"npc"|"monster",           // classify if provided; else "monster" by default
    "init": integer,                        // initiative score (higher acts first)
    "status": "alive"|"dead"|"unconscious"|"defeated",
    "condition": string,                    // "none" or valid 5e condition label if provided
    "acted": boolean,                       // has this creature already completed its turn this round?
    "tiebreaker": {                         // used only to sort ties; include if available
      "dex_mod": integer|null,
      "dex_score": integer|null,
      "seed": string|null                   // deterministic fallback (e.g., stable name hash)
    }
  }
}

@BUILD_RULES={
  r1_source_of_truth: If an explicit "Initiative Order:" list appears in input, honor its order and scores exactly.
  r2_compute_if_missing: If no explicit order exists, compute from provided initiative scores; sort DESC by "init".
  r3_tie_breakers: On equal "init", sort by (a) higher dex_mod, then (b) higher dex_score, then (c) name ASCII ascending. If none provided, set tiebreaker.dex_mod = null, dex_score = null, seed = "name".
  r4_status_filtering: Exclude "dead" and "defeated" from "order". Exclude "unconscious" from "order" but list under "unconscious".
  r5_act_pointer:
    - If input provides who has already acted this round, set acted=true for those entries.
    - Set current_index to the first index in "order" with acted=false.
    - If all acted=true (round complete), set current_index = 0 and set acted=false for all (caller will increment round).
  r6_remaining_list: "remaining_in_round" is the sequence of names in "order" with acted=false, starting at current_index.
  r7_ids_and_types:
    - If id_map provided, set id = id_map[name] else null.
    - If type is explicitly provided in input, copy it.
    - Else if party_names contains name (exact match), set type="pc".
    - Else if npc_names contains name (exact match), set type="npc".
    - Else type="monster".
  r8_normalize_names: Preserve exact casing and spacing from input; never rewrite names.
  r9_consistency: Each ALIVE creature appears exactly once in "order". No duplicates. No missing participants that are alive.
  r10_immutability_note: Do NOT invent creatures, conditions, initiative scores, or ids not present in input.
  r11_round_inference: If current_round is provided, set "round" = current_round; else use the explicit round in input; else keep prior given round if present; else default to 1.
}

@VALIDATION={
  v1_schema: Output MUST conform to @SCHEMA shape; no extra top-level keys.
  v2_json: Valid JSON only; no comments, no trailing commas, no NaN/Infinity/undefined.
  v3_ascii: Replace Unicode punctuation with ASCII equivalents before emitting.
  v4_order_integrity: "order" strictly sorted according to rules; "current_actor" = order[current_index].name.
  v5_cross_sets: A name cannot be in both "order" and "dead" or "unconscious".
  v6_acted_flags: Count of acted=false must equal len(remaining_in_round).
  v7_type_consistency: If party_names is provided, every name in party_names present in "order" must have type="pc".
}

@OUTPUT_CONSTRAINTS={
  nocodefence: Do NOT wrap in code fences.
  quotes: Replace " " with " and ' ' with ' .
  dashes: Replace —/– with -- .
  ellipsis: Replace … with ...
  arrows: Replace → with -> and ← with <- .
  nbsp: Replace non-breaking space with regular space.
  zerowidth: Remove zero-width characters.
  control: Remove ASCII control chars < 0x20 except tab/newline.
}

@ERROR_HANDLING={
  // If the input is inconsistent (e.g., named in order but also dead), resolve deterministically:
  e1_dead_in_order: Remove from "order", add to "dead".
  e2_unconscious_in_order: Remove from "order", add to "unconscious".
  e3_duplicate_names: Keep first occurrence in "order", append a note "duplicate_removed:<name>" and drop duplicates.
  e4_missing_scores: If "Initiative Order" explicitly lists the sequence but omits numeric scores, keep the given sequence and set init=null; sorting defers to given order.
  e5_no_data: If neither order nor scores provided, output minimal structure with empty "order", current_index=0, and a note "no_initiative_data".
  e6_party_type_missing: If a name is in party_names but type not set, force type="pc" and add note "forced_pc:<name>".
}

@FINALIZE={
  assert_v1: "current_actor" must equal order[current_index].name (unless order empty; then omit current_actor and set remaining_in_round=[]).
  assert_v2: Names must be unique across "order", "dead", and "unconscious".
  assert_v3: JSON validity and ASCII checks pass.
  assert_v4: If party_names provided, all those present in order must have type="pc".
}